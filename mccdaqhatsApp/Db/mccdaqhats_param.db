################################################################################
# SPDX-License-Identifier: EPICS
#
# Helmholtz-Zentrum Berlin fuer Materialien und Energie GmbH 2023
# template created by Lutz Rossa <rossa@helmholtz-berlin.de>
#
# This database contains records corresponding to parameters.
################################################################################

record(mbbi, "$(P):status")
{
    field(DESC, "device status")
    field(PINI, "$(PINI)")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))STATUS")
    field(SCAN, "I/O Intr")
    field(ZRST, "OFF")
    field(ZRVL, "0")
    field(ONST, "CC")
    field(ONVL, "1")
    field(TWST, "CV")
    field(TWVL, "2")
    field(SCAN, "1 second")
}

record(ao, "$(P):voltage")
{
    field(DESC, "output voltage")
    field(PINI, "$(PINI)")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT), $(ADDR), $(TIMEOUT))VOLTAGE")
    info(asyn:READBACK, "1")
}

record(ai, "$(P):voltageRB")
{
    field(DESC, "readback of output voltage")
    field(PINI, "$(PINI)")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))VOLTAGE")
    field(SCAN, "1 second")
}

record(ao, "$(P):current")
{
    field(DESC, "output current")
    field(PINI, "$(PINI)")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT), $(ADDR), $(TIMEOUT))CURRENT")
    info(asyn:READBACK, "1")
}

record(ai, "$(P):currentRB")
{
    field(DESC, "readback of output current")
    field(PINI, "$(PINI)")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))CURRENT")
    field(SCAN, "1 second")
}

record(ai, "$(P):power")
{
    field(DESC, "calculated output power")
    field(PINI, "$(PINI)")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))POWER")
    field(SCAN, "1 second")
}

record(ai, "$(P):resistance")
{
    field(DESC, "calculated output resistance")
    field(PINI, "$(PINI)")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))RESISTANCE")
    field(SCAN, "1 second")
}

record(stringout, "$(P):communicate")
{
    field(DESC, "device communication")
    field(PINI, "$(PINI)")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), $(ADDR), $(TIMEOUT))COMMUNICATE")
    field(SCAN, "Passive")
    info(asyn:FIFO, "3")
    info(asyn:READBACK, "1")
}
